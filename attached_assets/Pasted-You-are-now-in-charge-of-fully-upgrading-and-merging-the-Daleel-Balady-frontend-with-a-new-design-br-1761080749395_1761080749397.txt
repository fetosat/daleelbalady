You are now in charge of fully upgrading and merging the Daleel Balady frontend with a new design branch called new-design, while keeping feature parity, code stability, and production readiness.

Read carefully and follow all steps exactly ‚Äî this task has no time limits.

üß© Project Context

Monorepo structure:

/frontend ‚Üí current live website (daleelbalady.com + www.daleelbalady.com)

/backend ‚Üí running API at api.daleelbalady.com (DO NOT modify backend code directly)

/new-design ‚Üí new modern frontend UI/UX (Next.js + Tailwind)

The backend is live and stable.
You can call APIs and test integrations via https://api.daleelbalady.com,
but do not modify or redeploy backend.
I (the user) will handle that manually when you say ‚Äúready for backend update‚Äù.

You are free to update the frontend and preview changes live using Replit‚Äôs server.
The frontend connects directly to the current API and should remain compatible.

üß± Objective

Merge new-design into the main /frontend folder.

Ensure the existing pages and features in /frontend remain functional.

Apply the new design system (from /new-design) to all corresponding pages.

Fix all existing bugs, broken links, and layout issues.

Maintain full feature parity:

If a page exists in /frontend but not in /new-design, keep it as is.

If a feature exists in /frontend and not in /new-design, keep it.

Merge styles, animations, components, and layouts from /new-design into /frontend version.

Use the new design system‚Äôs components and layout patterns where possible.

üß† Detailed Instructions
1Ô∏è‚É£ Code Review

Analyze both /frontend and /new-design completely.

Identify:

Shared components

Unique pages

Differences in structure (layouts, routes, API hooks)

Create a compatibility map internally to ensure nothing breaks post-merge.

2Ô∏è‚É£ Merge Carefully

Begin by creating a temporary working branch: frontend-merge-work.

Move all /new-design components, pages, and styles into /frontend.

Do not overwrite logic files (API routes, hooks, utilities) unless absolutely necessary.

Reconcile shared components (Header, Footer, Layout, Sidebar, etc.) so they match the new design but retain existing logic.

Migrate global styling and theme (Tailwind config, globals.css, dark mode support).

Preserve environment variables and Next.js configuration.

3Ô∏è‚É£ Update Layouts & Components

Integrate new-design components progressively:

Use new glassmorphism, animations, and UI structure.

Replace outdated sections while preserving data fetching logic.

Use Framer Motion for animations if included in the new design.

Keep all i18n, localization (Arabic/English) intact.

Keep all navigation routes working.

4Ô∏è‚É£ Feature Integrity Check

Check every major route:

/, /find, /pricing, /login, /signup, /dashboard, /company, /about, /support, /help-center, /terms, /privacy

Ensure all buttons, inputs, filters, and links work.

Verify map (Leaflet/OpenStreetMap) components in /find are functional.

Verify authentication pages (Google/Facebook login buttons) are not broken.

Verify dashboard routes if they exist (admin, provider).

5Ô∏è‚É£ Testing

Run full linting, type-checking, and build tests.

npm run lint

npm run type-check

npm run build

Fix all errors and warnings.

Test the app fully in both light/dark mode and Arabic/English.

6Ô∏è‚É£ UI Consistency & Animations

Apply consistent color palette, typography, and spacing system from new-design.

Ensure smooth on-scroll animations, hover states, and transitions.

Add glassmorphism backdrops, floating cards, and dynamic category sliders.

Make sure the overall look matches the premium UI direction already defined for Daleel Balady.

7Ô∏è‚É£ API & Integration Check

Verify that all API calls (especially in /find, /booking, /auth) point to https://api.daleelbalady.com.

Confirm that API response structures are still handled properly.

Do not change backend endpoints or schema ‚Äî only adapt the frontend if needed.

8Ô∏è‚É£ Final Optimization

Optimize all images and static assets.

Enable lazy loading for heavy components.

Remove unused imports and dependencies.

Minimize bundle size (check with next build analysis).

Ensure responsiveness across all devices.

9Ô∏è‚É£ Final Steps

Once everything is stable and working:

Commit changes to a new branch: frontend-merged-newdesign

Run a full production build test.

Deploy live on Replit test environment.

Confirm compatibility with api.daleelbalady.com.

When ready, output:
‚úÖ Merge complete and production-ready. Please update backend manually.

üíé Quality Requirements

Follow Next.js 14 + App Router structure.

Maintain Tailwind + Shadcn/UI + Framer Motion stack.

Use React Query or SWR for data fetching (no fetch duplication).

Maintain full Dark/Light mode, RTL/LTR, and mobile responsiveness.

Keep the code clean, documented, and organized.

‚úÖ Output

Fully merged and upgraded /frontend directory

All pages redesigned using new-design visual system

No loss of features or data handling

Production build passes successfully

Live preview ready on Replit servers

Detailed summary of:

Updated files

Fixed issues

Added components

Known remaining notes (if any)

Final Instruction:
Work autonomously, safely, and meticulously.
Do not delete any functionality ‚Äî enhance and modernize everything.
Take as much time as needed.
When all tasks are done and tested, output a final report and mark the project as ‚úÖ Production Ready.