You must implement the full frontend upgrade and merge now. Do not pause. Do not ask any questions. If a file or resource is missing, attempt reasonable defaults, log it, and continue. Work autonomously until completion. Follow all steps below exactly.

ðŸ”§ High-level goal

Merge /new-design into /frontend, keep feature parity, fix all frontend bugs, make the frontend production-ready (dark/light, AR/EN RTL/LTR, animations, map, filters, pricing, auth, menus, pages), and deploy a live preview on Replit. Do not modify or deploy the backend (located in /backend or the live API at https://api.daleelbalady.com). When finished, produce a final report and mark status "Production Ready (frontend merged new-design)".

âœ… Rules of engagement (MANDATORY)

No questions â€” proceed even if something is missing. Log missing items and assume safe defaults.

Do not change backend code or restart backend servers. You may call the API at https://api.daleelbalady.com for testing.

Keep all existing frontend features. Do not remove functionality present in /frontend even if not in /new-design. Merge visual/design changes from /new-design into the working logic.

Use the branch names exactly as specified. Commit often with clear messages.

Ensure code passes lint/type/build and all major views work in both languages and both themes.

ðŸ›  Detailed step-by-step plan (execute in order)
Phase 0 â€” Preparation

Create working branch from current frontend:
git checkout -b frontend-merge-work

Ensure /new-design exists. If empty, attempt to fetch a new-design.zip from workspace or a provided URL. If still empty, log: WARNING: /new-design empty â€” proceeding with best-effort merge using any design tokens available in repo.

Install dependencies for frontend: npm ci (or yarn) in /frontend.

Phase 1 â€” Analysis & Compatibility Map

Programmatically scan /frontend and /new-design for pages, components, layout files, tailwind config, i18n, theme code, and global utilities. Produce a compatibility map file at /tmp/merge-compatibility.json listing:

files present only in /frontend

files present only in /new-design

files present in both (candidate for merge)

Log the compatibility map to console and to /merge-report/compatibility-map.json.

Phase 2 â€” Merge core systems (safe-first approach)

Backup the frontend folder: copy /frontend â†’ /tmp/frontend-backup-<timestamp>.

Merge global design tokens and Tailwind config from /new-design:

Merge tailwind.config.js carefully: keep existing custom classes used by logic; add new design tokens and colors from /new-design.

Merge globals.css (or styles) by importing new design variables rather than overwriting logic-critical CSS. Preserve any vendor prefixes and existing CSS variables used by app code.

Merge theme/dark-mode logic (next-themes or equivalent) from /new-design, ensuring it keeps existing localStorage keys for theme and language. If both exist, unify into a single provider ThemeProvider and test toggling.

Phase 3 â€” Layout & Components

Replace Header, Footer, Main Layout in /frontend with new-design versions while preserving existing route logic and data fetching. Keep event handlers, nav routes, Google/Facebook login code, and i18n hooks intact.

For shared components (search bar, category slider, cards, modals), merge by:

Copy new-design visual component files to /frontend/components/ui/ but do not delete existing logic components. Create adapters where needed (e.g., SearchBar.v2.tsx that uses old API hooks).

For each component used by pages, run the page and fix prop mismatches; add temporary compatibility wrappers if necessary.

Phase 4 â€” Pages & Routing

Ensure all pages listed in the project scope exist and work:

/ (home)

/find

/pricing

/login, /signup (Google/Facebook social login)

/dashboard (if frontend has provider/admin dashboard pages)

/company, /about, /careers, /blog, /support, /help-center, /privacy, /terms

For each page:

Update UI to new-design look while preserving existing API calls and state management logic.

If a page exists in /frontend and not in /new-design, leave content but enhance visuals to align with theme (font, spacing, colors).

If a page exists in /new-design and not in /frontend, integrate it, wire data fetching to https://api.daleelbalady.com endpoints, and provide mock fallbacks if endpoints unavailable.

Phase 5 â€” Feature-specific priorities & checks

Do these in priority order â€” fix fully before moving to next:

Find page

Implement the compact/scrollable category selector (horizontal carousel). Ensure all categories display without overflow on desktop; allow horizontal drag on mobile.

Add filters: location toggle + radius slider, normal search, price range slider, time range, and Order By options (Reviews, Recommendation, Location, Customers, Rating, Recent).

Views: Grid / List / Map toggle. Implement Leaflet (react-leaflet) map with OpenStreetMap tiles. Use provided mock data array (lat/lng). Marker colors & icons per category. Marker clustering and popups showing result card.

Ensure RTL/LTR and theme support.

Booking flow

Verify booking APIs are called correctly; if webhook or payment not present, mock success flows for UI.

Ensure booking calendar integration on provider dashboard (if present) shows bookings (mock) and that bookings UI can be triggered from result cards.

Pricing page

Implement user/provider plans as per new-design with glassmorphism, animated cards, and CTA flows. Keep subscription endpoints referencing /backend but do not change backend. Mock payment flow for front-end UX if Paymob not integrated.

Auth pages

Keep Google & Facebook button flows intact; if credentials are not available in env, show working UI and a mock success handler. Do not attempt to create keys.

Dashboards (Provider & Admin)

If present in frontend, ensure the new-design styling is applied. If dashboards are not fully present, integrate pages but use mock data and skeletons. Key: Bookings page â€” must show calendar, daily bookings listing, color-coded status, ability to approve/reschedule/cancel (UI only if API missing).

Other pages

Company, About, Careers, Blog, Support, Help Center, Privacy, Terms: implement new-design templates and populate with existing content or mock content.

Phase 6 â€” Integration & Testing

Run lint/type/build:

cd frontend && npm run lint && npm run type-check && npm run build

Fix all errors. If build fails due to backend contract mismatch, add graceful fallbacks (try/catch and show empty state or skeleton).

End-to-end sanity tests:

Manually navigate all routes and test flows: search â†’ view â†’ book; login; signup; toggle language; toggle theme; view pricing; checkout mock; provider bookings calendar.

Accessibility quick checks: tab navigation, aria labels on interactive elements.

Phase 7 â€” Performance & Final polish

Optimize images (use next/image where possible), lazy load heavy components (map, carousels).

Remove unused packages (compare package.json pre/post merge).

Run next build and next export (if static parts exist) and verify no warnings left.

Phase 8 â€” Commit, Branch & Deploy preview

Commit frequently. When stable:

git checkout -b frontend-merged-newdesign

Commit final changes with message: feat: merge new-design into frontend â€” apply new UI, preserve logic, add find/map/pricing/auth improvements

Push branch to repo remote.

Deploy preview on Replit test environment. Confirm app connects to https://api.daleelbalady.com for live data. Provide the Replit preview URL.

Phase 9 â€” Deliverables & Final Report

Produce /merge-report/FINAL_REPORT.md with:

Summary of work done

List of updated files (paths)

Fixed bugs and notes

Remaining known issues (if any) and safe recommendations

How to run locally and commands used

Replit preview URL and branch name

Output the phrase exactly:
âœ… Merge complete and production-ready. Please update backend manually.

ðŸ›¡ Safety & fallback rules

If any required environment variable is missing (e.g. OAuth keys, Paymob keys), do not block: implement mock flows and add clear TODO comments and entries in the final report listing env variable names and expected values.

If an endpoint returns unexpected schema, fallback to mocks and log the mismatch in the report.

If a merge conflict occurs, resolve by keeping functional logic from /frontend and adopting styles/visuals from /new-design. Document conflicts in the report.

Do not push secrets to the repo.

ðŸ“£ Final instruction (must be followed)

Work until the frontend is fully functional in the Replit preview and all checks pass. Do not halt for questions. When finished, commit to frontend-merged-newdesign, push, deploy preview, create /merge-report/FINAL_REPORT.md, and print exactly:

âœ… Merge complete and production-ready. Please update backend manually.